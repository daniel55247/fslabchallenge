# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: FSLAB Test AWS CICD

on:
  push:
    branches: main

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: configure node JS
      uses: actions/setup-node@v4
      with:
        node-version: 15
        cache: 'npm'
        cache-dependency-path: codebase/rdicidr-0.1.0/package-lock.json

    - name: Install
      working-directory: codebase/rdicidr-0.1.0
      run: npm install
    
    - name: ESLint
      working-directory: codebase/rdicidr-0.1.0
      run: npm run lint
    
    - name: prettier
      working-directory: codebase/rdicidr-0.1.0
      run: npm run prettier || true

    - name: test
      working-directory: codebase/rdicidr-0.1.0
      run:  CI=true npm run test

    - name: build
      working-directory: codebase/rdicidr-0.1.0
      run: npm run build --if-present
    
  buildimage:
    name: build docker image
    runs-on: ubuntu-latest
    needs: [build]

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Build the Docker image
      working-directory: codebase/rdicidr-0.1.0
      run: | 
       echo "${{secrets.GHCR_TOKEN}}" | docker login ghcr.io -u daniel55247 --password-stdin
       docker build -t ghcr.io/daniel55247/fslabchallenge/fslabimagechallenge:latest .
       docker push ghcr.io/daniel55247/fslabchallenge/fslabimagechallenge:latest


  deploy:
      name: Deploy to AWS ECS
      runs-on: ubuntu-latest
      needs: [buildimage]
   
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
  
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-2
    
        - name: Update ECS Task Definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ./task-definition.json
            container-name: app-container  # Change to your container name
            image: ghcr.io/daniel55247/try2/imagefstry2:latest
          
        - name: Deploy to Amazon ECS
          uses: aws-actions/amazon-ecs-deploy-task-definition@v2
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: test-service
            cluster: testCluster
            wait-for-service-stability: true
    
    

